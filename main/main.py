import sys
import os
import subprocess
import webbrowser
import requests
import time
from threading import Timer
from pathlib import Path

# Configuraci√≥n de paths
BASE_DIR = Path(__file__).parent.parent
PRESENTACION_DIR = BASE_DIR / "presentacion"
HTML_FILE = PRESENTACION_DIR / "src" / "index.html"
API_URL = "http://127.0.0.1:8000"  # URL base de la API

# Asegura que la carpeta ra√≠z del proyecto est√© en sys.path
sys.path.append(str(BASE_DIR))

def limpiar_consola():
    os.system('cls' if os.name == 'nt' else 'clear')

def mostrar_menu():
    print("""
 WORLDCHAT - Mensajer√≠a

1Ô∏è‚É£  Crear estructura en SQL Server
2Ô∏è‚É£  Crear estructura en MySQL
3Ô∏è‚É£  Restaurar datos en SQL Server desde Excel
4Ô∏è‚É£  Restaurar datos en MySQL desde Excel
5Ô∏è‚É£  Exportar datos desde SQL Server a Excel
6Ô∏è‚É£  Exportar datos desde MySQL a Excel
7Ô∏è‚É£  Verificar conexi√≥n a SQL Server
8Ô∏è‚É£  Verificar conexi√≥n a MySQL
9Ô∏è‚É£  Ver datos desencriptados (pruebas)
üîü  Iniciar servidor de chat (FastAPI + Interfaz)
0Ô∏è‚É£  Salir
""")

def verificar_servidor():
    """Verifica si el servidor est√° respondiendo"""
    try:
        response = requests.get(f"{API_URL}/docs", timeout=2)
        return response.status_code == 200
    except:
        return False

def iniciar_servidor_chat():
    """Inicia el servidor FastAPI y abre el navegador con la interfaz"""
    try:
        # Comando para iniciar el servidor FastAPI
        fastapi_cmd = "python -m uvicorn logica.app.routes:app --reload"
        
        # Verificar si el servidor ya est√° corriendo
        if verificar_servidor():
            print("‚úÖ El servidor ya est√° en ejecuci√≥n")
            abrir_navegador()
            return
        
        # Iniciar el servidor en un proceso separado
        server_process = subprocess.Popen(
            fastapi_cmd,
            shell=True,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            cwd=BASE_DIR
        )
        
        # Esperar a que el servidor est√© listo
        print("‚è≥ Iniciando servidor API...", end='', flush=True)
        for _ in range(10):  # Esperar m√°ximo 10 segundos
            if verificar_servidor():
                print("\n‚úÖ Servidor API listo en", API_URL)
                abrir_navegador()
                return
            print('.', end='', flush=True)
            time.sleep(1)
        
        print("\n‚ùå El servidor no respondi√≥ a tiempo")
        
    except Exception as e:
        print(f"\n‚ùå Error al iniciar el servidor: {e}")

def abrir_navegador():
    """Abre el navegador con la interfaz HTML"""
    try:
        html_path = f"file://{HTML_FILE.absolute()}"
        
        if not HTML_FILE.exists():
            print(f"‚ùå Archivo HTML no encontrado en: {html_path}")
            return
        
        webbrowser.open(html_path)
        print(f"üåê Navegador abierto en: {html_path}")
        print("\nüîç Verifica lo siguiente si las rutas no funcionan:")
        print("1. Que tu HTML use URLs absolutas como http://localhost:8000/api/ruta")
        print("2. Que CORS est√© configurado correctamente en tu API")
        print("3. Que no haya errores en la consola del navegador (F12)")
        
    except Exception as e:
        print(f"‚ùå Error al abrir navegador: {e}")

def ejecutar_opcion(opcion):
    """Ejecuta la opci√≥n seleccionada"""
    if opcion == "10":
        iniciar_servidor_chat()
    else:
        # Importar y ejecutar la l√≥gica original
        from app import ejecutar_opcion as ejecutar_opcion_original
        ejecutar_opcion_original(opcion)

if __name__ == "__main__":
    while True:
        limpiar_consola()
        mostrar_menu()
        opcion = input("Selecciona una opci√≥n: ").strip()
        
        if opcion == "0":
            print("Saliendo del programa...")
            break
            
        limpiar_consola()
        ejecutar_opcion(opcion)
        
        if opcion != "10":  # No pausar si inici√≥ el servidor
            input("\nPresiona ENTER para continuar...")